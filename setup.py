#!/usr/bin/env python3
"""
Setup script for Exam Portal
This script helps with initial setup and database initialization
"""

import os
import sys
import secrets
import getpass
from werkzeug.security import generate_password_hash

def generate_secret_key():
    """Generate a secure secret key"""
    return secrets.token_hex(32)

def create_env_file():
    """Create .env file with user input"""
    print("\n🔧 Setting up environment configuration...")
    
    # Get MongoDB URI
    mongo_uri = input("\nEnter your MongoDB URI (or press Enter to use in-memory storage): ").strip()
    if not mongo_uri:
        mongo_uri = ""
        print("📝 Using in-memory storage (data will be lost on restart)")
    
    # Generate secret key
    secret_key = generate_secret_key()
    print(f"🔑 Generated secret key: {secret_key[:20]}...")
    
    # Create .env file
    env_content = f"""# Exam Portal Environment Configuration
# Generated by setup.py

# MongoDB Connection String
MONGO_URI={mongo_uri}

# Secret key for session management
SECRET_KEY={secret_key}

# Port (optional)
PORT=5001

# Environment
FLASK_ENV=development
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ Created .env file")

def create_admin_user():
    """Create an admin user"""
    try:
        from app import db, generate_password_hash
        import datetime
        
        print("\n👤 Creating admin user...")
        
        username = input("Enter admin username: ").strip()
        if not username:
            print("❌ Username cannot be empty")
            return False
        
        password = getpass.getpass("Enter admin password: ")
        if len(password) < 4:
            print("❌ Password must be at least 4 characters")
            return False
        
        # Check if user exists
        existing_user = db.users.find_one({"username": username})
        if existing_user:
            print(f"❌ User '{username}' already exists")
            return False
        
        # Create admin user
        hashed_password = generate_password_hash(password)
        user_doc = {
            "username": username,
            "password": hashed_password,
            "role": "staff",
            "created_at": datetime.datetime.utcnow()
        }
        
        result = db.users.insert_one(user_doc)
        print(f"✅ Created admin user '{username}' with ID: {result.inserted_id}")
        return True
        
    except ImportError:
        print("❌ Cannot create admin user - app not properly installed")
        return False
    except Exception as e:
        print(f"❌ Error creating admin user: {e}")
        return False

def install_dependencies():
    """Install required dependencies"""
    print("\n📦 Installing dependencies...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("✅ Dependencies installed successfully")
            return True
        else:
            print(f"❌ Error installing dependencies: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ Error installing dependencies: {e}")
        return False

def check_files():
    """Check if required files exist"""
    print("\n📁 Checking required files...")
    
    required_files = [
        'app.py',
        'requirements.txt',
        'templates/index.html',
        'templates/base_dashboard.html',
        'static/css/style.css'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
        else:
            print(f"✅ {file}")
    
    if missing_files:
        print(f"\n❌ Missing files: {', '.join(missing_files)}")
        return False
    
    print("✅ All required files present")
    return True

def main():
    """Main setup function"""
    print("🎓 Exam Portal Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not os.path.exists('app.py'):
        print("❌ Error: app.py not found. Make sure you're in the correct directory.")
        sys.exit(1)
    
    # Check required files
    if not check_files():
        print("\n❌ Setup cannot continue due to missing files")
        sys.exit(1)
    
    # Install dependencies
    install_deps = input("\nInstall dependencies? (y/n): ").lower().strip() == 'y'
    if install_deps:
        if not install_dependencies():
            print("❌ Dependency installation failed")
            sys.exit(1)
    
    # Create .env file
    if not os.path.exists('.env') or input("\n.env file exists. Recreate? (y/n): ").lower().strip() == 'y':
        create_env_file()
    
    # Create admin user
    create_admin = input("\nCreate admin user? (y/n): ").lower().strip() == 'y'
    if create_admin:
        create_admin_user()
    
    print("\n🎉 Setup complete!")
    print("\nTo start the application:")
    print("1. Activate your virtual environment (if using one)")
    print("2. Run: python app.py")
    print("3. Open http://localhost:5001 in your browser")
    print("\n📚 Check README.md for detailed instructions")

if __name__ == '__main__':
    main()